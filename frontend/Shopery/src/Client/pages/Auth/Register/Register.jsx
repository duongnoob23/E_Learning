import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import OTP from "../../../components/Auth/OTP/OTP";
import {
  useRegister,
  useVerifyEmail,
} from "../../../services/Auth/authMutations";
import "./Register.css";
const Register = () => {
  const [showPassword, setShowPassword] = useState(false);
  const [showConfirmPassword, setShowConfirmPassword] = useState(false);
  const [showOtpModal, setShowOtpModal] = useState(false);
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    confirmPassword: "",
    email: "",
  });

  const [data, setData] = useState({
    usename: "",
    password: "",
    confirmPassword: "",
    email: "",
  });

  const handleChangeDate = (name, value) => {
    let newData = [...data];
    newData[name] = value;
    setData(newData);
    setData((pre) => ({ ...pre, [name]: value }));
  };
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();

  // L·∫•y state t·ª´ Redux
  const {
    isAuthenticated,
    user,
    error: authError,
  } = useSelector((state) => state.auth);

  // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng
  useEffect(() => {
    if (isAuthenticated && user) {
      if (user.role === "client") {
        navigate("/login");
      }
    }
  }, [isAuthenticated, user, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // X√≥a l·ªói khi user b·∫Øt ƒë·∫ßu nh·∫≠p
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;

    if (!formData.username.trim()) {
      newErrors.username = "T√™n ƒëƒÉng nh·∫≠p kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    } else if (formData.username.length < 3) {
      newErrors.username = "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª±";
    }

    if (!formData.email.trim()) {
      newErrors.email = "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    } else if (!emailRegex.test(formData.email)) {
      newErrors.email = "Email kh√¥ng h·ª£p l·ªá";
    }

    if (!formData.password.trim()) {
      newErrors.password = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    } else if (formData.password.length < 6) {
      newErrors.password = "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 6 k√Ω t·ª±";
    }

    if (formData.password !== formData.confirmPassword) {
      newErrors.confirmPassword = "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp";
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const registerMutation = useRegister();

  const handleSubmit = async (e) => {
    e.preventDefault(); // d·ª´ng submit

    if (!validateForm()) {
      return;
    } // ki·ªÉm tra ch∆∞a validate form th√¨ return
    setIsLoading(true);
    setErrors({});

    try {
      const result = await registerMutation.mutateAsync({
        username: formData.username,
        email: formData.email,
        password: formData.password,
        confirmPassword: formData.confirmPassword,
      });
      console.log(">>>", result);
      if (+result.data.EC === 0) {
        toast.success(result?.EM || "ƒêƒÉng k√Ω th√†nh c√¥ng");
        setShowOtpModal(true);
      }
    } catch (error) {
      console.log(error.message);
      toast.error(error?.EM || "ƒêƒÉng k√≠ t√†i kho·∫£n th·∫•t b·∫°i");
    } finally {
      setIsLoading(false);
    }
  };

  const verifyEmailMutation = useVerifyEmail();

  const handleOtpSubmit = async ({ message, code }) => {
    console.log("üöÄ OTP nh·∫≠n ƒë∆∞·ª£c t·ª´ OTP.jsx:", message, code);

    if (message === "RESEND") {
      // TODO: G·ªçi API g·ª≠i l·∫°i OTP n·∫øu c·∫ßn
      console.log("üöÄ Ng∆∞·ªùi d√πng b·∫•m G·ª≠i l·∫°i OTP");
      toast.info("Ch·ª©c nƒÉng g·ª≠i l·∫°i OTP s·∫Ω ƒë∆∞·ª£c ph√°t tri·ªÉn");
      return;
    }

    if (message === "SEND") {
      setIsLoading(true);
      setErrors("");
      try {
        // ‚úÖ G·ªçi API verify email b·∫±ng TanStack Query
        const result = await verifyEmailMutation.mutateAsync({
          email: formData.email,
          otp: code,
        });
        console.log(result);

        if (result.data.EC === "0") {
          toast.success(result.EM || "X√°c nh·∫≠n OTP th√†nh c√¥ng");
          setShowOtpModal(false);
        } else {
          // X√°c th·ª±c th·∫•t b·∫°i
          toast.error(result?.EM || "M√£ OTP kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n");
        }
      } catch (error) {
        console.error("Verify email error:", error);
        setErrors("C√≥ l·ªói khi x√°c th·ª±c OTP. Vui l√≤ng th·ª≠ l·∫°i.");
      } finally {
        setIsLoading(false);
      }
    }
  };
  return (
    <div>
      <div className="auth-page">
        <div className="auth-page__container">
          {/* Ph·∫ßn b√™n tr√°i - Form */}
          <div className="auth-page__form-section">
            <div className="auth-page__form-container">
              {/* Header */}
              <div className="auth-page__header">
                <h1 className="auth-page__welcome">Ch√†o m·ª´ng ƒë·∫øn v·ªõi TOTC!</h1>

                {/* Toggle buttons */}
                <div className="auth-page__toggle">
                  <div
                    className={`auth-page__toggle-slider auth-page__toggle-slider--register`}
                  ></div>
                  <button
                    className={`auth-page__toggle-btn `}
                    onClick={() => navigate("/login")}
                    type="button"
                  >
                    ƒêƒÉng nh·∫≠p
                  </button>
                  <button
                    className={`auth-page__toggle-btn auth-page__toggle-btn--active`}
                    onClick={() => navigate("/register")}
                    type="button"
                  >
                    ƒêƒÉng k√≠
                  </button>
                </div>

                {/* <Auth /> */}

                <p className="auth-page__description">
                  T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh h·ªçc t·∫≠p tuy·ªát v·ªùi c√πng
                  TOTC. Nh·∫≠n ngay voucher 50K cho kh√≥a h·ªçc ƒë·∫ßu ti√™n!
                </p>
              </div>

              {/* Form */}
              <form className="auth-page__form" onSubmit={handleSubmit}>
                {/* Hi·ªÉn th·ªã l·ªói */}
                {/* {authError && <div className="auth-page__error">{authError?.EM}</div>}
              {errors.submit && (
                <div className="auth-page__error">{errors.submit}</div>
              )} */}

                {/* Username field */}
                <div className={`auth-page__field `}>
                  <div className="auth-page__field">
                    <label className="auth-page__label">T√™n ƒëƒÉng nh·∫≠p</label>
                    <input
                      type="text"
                      name="username"
                      className={`auth-page__input ${
                        errors.username ? "error" : ""
                      }`}
                      placeholder="Nh·∫≠p t√™n ƒëƒÉng nh·∫≠p c·ªßa b·∫°n"
                      value={formData.username}
                      onChange={handleInputChange}
                    />
                    {errors.username && (
                      <span className="auth-page__error-text">
                        {errors.username}
                      </span>
                    )}
                  </div>
                </div>

                {/* Email field - ch·ªâ hi·ªÉn th·ªã khi Register */}
                <div className={`auth-page__field `}>
                  <label className="auth-page__label">Email</label>
                  <input
                    type="text"
                    name="email"
                    className={`auth-page__input ${
                      errors.email ? "error" : ""
                    }`}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n"
                    value={formData.email}
                    onChange={handleInputChange}
                  />
                  {errors.email && (
                    <span className="auth-page__error-text">
                      {errors.email}
                    </span>
                  )}
                </div>

                {/* Password field */}
                <div className="auth-page__field">
                  <label className="auth-page__label">M·∫≠t kh·∫©u</label>
                  <div className="auth-page__password-wrapper">
                    <input
                      type={showPassword ? "text" : "password"}
                      name="password"
                      className={`auth-page__input ${
                        errors.password ? "error" : ""
                      }`}
                      placeholder="Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n"
                      value={formData.password}
                      onChange={handleInputChange}
                    />
                    <button
                      type="button"
                      className="auth-page__password-toggle"
                      onClick={() => setShowPassword(!showPassword)}
                    >
                      {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                    </button>
                  </div>
                  {errors.password && (
                    <span className="auth-page__error-text">
                      {errors.password}
                    </span>
                  )}
                </div>

                {/* Confirm Password - ch·ªâ hi·ªÉn th·ªã khi Register */}
                <div
                  className={`auth-page__field auth-page__field--register auth-page__field--visible`}
                >
                  <label className="auth-page__label">X√°c nh·∫≠n m·∫≠t kh·∫©u</label>
                  <div className="auth-page__password-wrapper">
                    <input
                      type={showConfirmPassword ? "text" : "password"}
                      name="confirmPassword"
                      className={`auth-page__input ${
                        errors.confirmPassword ? "error" : ""
                      }`}
                      placeholder="Nh·∫≠p l·∫°i m·∫≠t kh·∫©u c·ªßa b·∫°n"
                      value={formData.confirmPassword}
                      onChange={handleInputChange}
                    />
                    <button
                      type="button"
                      className="auth-page__password-toggle"
                      onClick={() =>
                        setShowConfirmPassword(!showConfirmPassword)
                      }
                    >
                      {showConfirmPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                    </button>
                  </div>
                  {errors.confirmPassword && (
                    <span className="auth-page__error-text">
                      {errors.confirmPassword}
                    </span>
                  )}
                </div>

                {/* Remember me v√† Forgot password - ch·ªâ hi·ªÉn th·ªã khi Login */}

                {/* Submit button */}
                <button
                  type="submit"
                  className="auth-page__submit-btn"
                  disabled={isLoading}
                >
                  {isLoading ? "ƒêang x·ª≠ l√Ω..." : "ƒêƒÉng k√Ω"}
                </button>
              </form>
            </div>
          </div>
          {/* Ph·∫ßn b√™n ph·∫£i - H√¨nh ·∫£nh */}

          <div className="auth-page__image-section">
            <div className="auth-page__image-overlay">
              <h2 className="auth-page__image-title">Ch√†o m·ª´ng ƒë·∫øn v·ªõi TOTC</h2>
              <p className="auth-page__image-subtitle">
                Kh√°m ph√° h√†ng ng√†n kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng v·ªõi gi√° t·ªët nh·∫•t. Mua s·∫Øm
                th√¥ng minh, ti·∫øt ki·ªám th·ªùi gian v√† chi ph√≠.
              </p>
            </div>
          </div>
        </div>
      </div>
      {showOtpModal && (
        <OTP
          open={showOtpModal}
          onClose={() => setShowOtpModal(false)}
          email={formData?.email}
          onSubmit={handleOtpSubmit}
        />
      )}
    </div>
  );
};

export default Register;
