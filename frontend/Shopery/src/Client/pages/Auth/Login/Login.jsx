import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { useNavigate } from "react-router-dom";
import { toast } from "react-toastify";
import { loginUser } from "../../../../redux/slices/authSlice";
import OTP from "../../../components/Auth/OTP/OTP";
import "./Login.css";

const Login = () => {
  const [isLoginMode, setIsLoginMode] = useState(true);
  const [showPassword, setShowPassword] = useState(false);
  const [rememberMe, setRememberMe] = useState(false);
  const [showOtpModal, setShowOtpModal] = useState(false);
  const [formData, setFormData] = useState({
    username: "",
    password: "",
    confirmPassword: "",
    email: "",
  });
  const [errors, setErrors] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const navigate = useNavigate();
  const dispatch = useDispatch();

  // L·∫•y state t·ª´ Redux
  const {
    isAuthenticated,
    user,
    error: authError,
  } = useSelector((state) => state.auth);

  // N·∫øu ƒë√£ ƒëƒÉng nh·∫≠p, chuy·ªÉn h∆∞·ªõng
  useEffect(() => {
    if (isAuthenticated && user) {
      navigate("/");
    }
  }, [isAuthenticated, user, navigate]);

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: value,
    }));

    // X√≥a l·ªói khi user b·∫Øt ƒë·∫ßu nh·∫≠p
    if (errors[name]) {
      setErrors((prev) => ({
        ...prev,
        [name]: "",
      }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.email.trim()) {
      newErrors.email = "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    }

    if (isLoginMode && !formData.password.trim()) {
      newErrors.password = "M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng";
    }
    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault(); // d·ª´ng submit
    console.log("0");
    if (!validateForm()) {
      return;
    } // ki·ªÉm tra ch∆∞a validate form th√¨ return
    setIsLoading(true);
    setErrors({});
    console.log("1");
    try {
      if (isLoginMode) {
        // g·ªçi api ƒëƒÉng nh·∫≠p
        const result = await dispatch(
          loginUser({
            email: formData.email,
            password: formData.password,
          })
        ).unwrap();
        console.log("üöÄ ~ handleSubmit ~ result:", result);

        if (+result?.EC === 0) {
          navigate("/");
          toast.success(result?.EM || "ƒêƒÉng nh·∫≠p th√†nh c√¥ng");
        }
      } else if (!isLoginMode) {
        // g·ªçi api l·∫•y l·∫°i m·∫≠t kh·∫©u;
        setShowOtpModal(true);
        console.log("üöÄ ~ handleSubmit ~ setShowOtpModal:");
      }
      // ƒêƒÉng nh·∫≠p
    } catch (error) {
      toast.error(error?.EM || "ƒêƒÉng nh·∫≠p th·∫•t b·∫°i");

      setErrors({
        submit: error?.EM || "C√≥ l·ªói x·∫£y ra",
      });
    } finally {
      setIsLoading(false);
    }
  };

  const handleOTP = async (e) => {
    console.log("submit");
  };
  return (
    <>
      <div className="auth-page">
        <div className="auth-page__container">
          {/* Ph·∫ßn b√™n tr√°i - H√¨nh ·∫£nh */}
          <div className="auth-page__image-section">
            <div className="auth-page__image-overlay">
              <h2 className="auth-page__image-title">Ch√†o m·ª´ng ƒë·∫øn v·ªõi TOTC</h2>
              <p className="auth-page__image-subtitle">
                Kh√°m ph√° h√†ng ng√†n kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng v·ªõi gi√° t·ªët nh·∫•t. Mua s·∫Øm
                th√¥ng minh, ti·∫øt ki·ªám th·ªùi gian v√† chi ph√≠.
              </p>
            </div>
          </div>

          {/* Ph·∫ßn b√™n ph·∫£i - Form */}
          <div className="auth-page__form-section">
            {!isLoginMode && (
              <button
                className="auth-page__return"
                onClick={(e) => setIsLoginMode(true)}
              >
                <i class="fa-solid fa-arrow-left"></i>
              </button>
            )}
            <div className="auth-page__form-container">
              {/* Header */}
              <div className="auth-page__header">
                <h1 className="auth-page__welcome">
                  {isLoginMode == true
                    ? `Ch√†o m·ª´ng ƒë·∫øn v·ªõi TOTC!`
                    : `L·∫•y l·∫°i m·∫≠t kh·∫©u!`}
                </h1>

                {/* Toggle buttons */}
                {isLoginMode == true && (
                  <div className="auth-page__toggle">
                    <div className={`auth-page__toggle-slider `}></div>
                    <button
                      className={`auth-page__toggle-btn auth-page__toggle-btn--active`}
                      onClick={() => navigate("/login")}
                      type="button"
                    >
                      ƒêƒÉng nh·∫≠p
                    </button>
                    <button
                      className={`auth-page__toggle-btn `}
                      onClick={() => navigate("/register")}
                      type="button"
                    >
                      ƒêƒÉng k√≠
                    </button>
                  </div>
                )}
                {/* <Auth /> */}

                <p className="auth-page__description">
                  {isLoginMode
                    ? `ƒêƒÉng nh·∫≠p ƒë·ªÉ truy c·∫≠p v√†o t√†i kho·∫£n c·ªßa b·∫°n 
                    v√† kh√°m ph√° h√†ng ng√†n kh√≥a h·ªçc ch·∫•t l∆∞·ª£ng 
                    v·ªõi ∆∞u ƒë√£i ƒë·∫∑c bi·ªát`
                    : "Nh·∫≠p email ho·∫∑c s·ªë ƒëi·ªán tho·∫°i c·ªßa b·∫°n ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u nhanh ch√≥ng"}
                </p>
              </div>

              {/* Form */}
              <form className="auth-page__form" onSubmit={handleSubmit}>
                {/* Hi·ªÉn th·ªã l·ªói */}
                {/* {authError && (
                <div className="auth-page__error">{authError?.EM}</div>
              )}
              {errors.submit && (
                <div className="auth-page__error">{errors.submit}</div>
              )} */}

                {/* Email field - ch·ªâ hi·ªÉn th·ªã khi Register */}
                <div className={`auth-page__field `}>
                  <label className="auth-page__label">Email</label>
                  <input
                    type="text"
                    name="email"
                    className={`auth-page__input ${
                      errors.email ? "error" : ""
                    }`}
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ email c·ªßa b·∫°n"
                    value={formData.email}
                    onChange={handleInputChange}
                  />
                  {errors.email && (
                    <span className="auth-page__error-text">
                      {errors.email}
                    </span>
                  )}
                </div>

                {/* Password field */}
                {isLoginMode && (
                  <div className="auth-page__field">
                    <label className="auth-page__label">M·∫≠t kh·∫©u</label>
                    <div className="auth-page__password-wrapper">
                      <input
                        type={showPassword ? "text" : "password"}
                        name="password"
                        className={`auth-page__input ${
                          errors.password ? "error" : ""
                        }`}
                        placeholder="Nh·∫≠p m·∫≠t kh·∫©u c·ªßa b·∫°n"
                        value={formData.password}
                        onChange={handleInputChange}
                      />
                      <button
                        type="button"
                        className="auth-page__password-toggle"
                        onClick={() => setShowPassword(!showPassword)}
                      >
                        {showPassword ? "üëÅÔ∏è" : "üëÅÔ∏è‚Äçüó®Ô∏è"}
                      </button>
                    </div>
                    {errors.password && (
                      <span className="auth-page__error-text">
                        {errors.password}
                      </span>
                    )}
                  </div>
                )}

                {/* Remember me v√† Forgot password - ch·ªâ hi·ªÉn th·ªã khi Login */}
                {isLoginMode && (
                  <div
                    className={`auth-page__options auth-page__options--visible`}
                  >
                    <label className="auth-page__checkbox">
                      <input
                        type="checkbox"
                        checked={rememberMe}
                        onChange={(e) => setRememberMe(e.target.checked)}
                      />
                      <span className="auth-page__checkbox-text">
                        Ghi nh·ªõ ƒëƒÉng nh·∫≠p
                      </span>
                    </label>
                    <button
                      type="button"
                      className="auth-page__forgot-link"
                      onClick={(e) => setIsLoginMode(false)}
                    >
                      Qu√™n m·∫≠t kh·∫©u
                    </button>
                  </div>
                )}

                {/* Submit button */}
                <button
                  type="submit"
                  className="auth-page__submit-btn"
                  disabled={isLoading}
                >
                  {isLoading
                    ? "ƒêang x·ª≠ l√Ω..."
                    : isLoginMode
                    ? "ƒêƒÉng nh·∫≠p"
                    : "Nh·∫≠n m√£ OTP"}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>
      {showOtpModal && (
        <OTP
          onClose={() => setShowOtpModal(false)}
          email={formData.email}
          onSubmit={handleOTP}
        />
      )}
    </>
  );
};

export default Login;

// lu·ªìng ƒëƒÉng nh·∫≠p c·ªßa admin c≈©ng ƒëang b·ªã l·ªói , khi nh·∫≠p t√†i kho·∫£n client v√†o t√†i kho·∫£n c·ªßa admin th√¨ n√≥ ko ph·∫£n h·ªïi g√¨

// c√≥ n√™n code ri√™ng lu·ªìng login admin/client register admin/client v√† user login/register kh√¥ng

// ch∆∞a c√≥ ch·ª©c nƒÉng ƒëƒÉng k√≠ tr√™n web

// code l·∫°i giao di·ªán ƒë∆°n v·ªã REM

// m·ªôt web c·∫ßn ph·∫£i check g√¨ nhi·ªÅu, l·ªói khi fetch api , s·∫≠p server, responsive...

// ƒë·ªçc l·∫°i db e_learnning2 ƒë·ªÉ hi·ªÉu xem gi·ªØ li·ªáu n√≥ th·ª±c t·∫ø ch∆∞ach∆∞a
