const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const { User } = require("../../models");
const { EmailVerification } = require("../../models");
const { sendOtpEmail } = require("../../utils/sendEmail");
const { Op } = require("sequelize");

// Sinh OTP ng·∫´u nhi√™n
function generateOtp() {
  return Math.floor(100000 + Math.random() * 900000).toString();
}
// ƒêƒÉng nh·∫≠p
exports.login = async (email, password) => {
  try {
    const user = await User.findByEmail(email);
    if (!user) {
      return {
        EM: "Email kh√¥ng t·ªìn t·∫°i",
        EC: "2",
        DT: null,
      };
    }

    const isMatch = await bcrypt.compare(password, user.password_hash);
    if (!isMatch) {
      return {
        EM: "M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng",
        EC: "2",
        DT: null,
      };
    }

    const token = jwt.sign(
      { userId: user.user_id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    const { password_hash, ...userWithoutPass } = user.toJSON();

    return {
      EM: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
      EC: "0",
      DT: {
        token,
        user: userWithoutPass,
      },
    };
  } catch (error) {
    console.error("Login service error:", error);
    return {
      EM: "L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau",
      EC: "-2", // l·ªói h·ªá th·ªëng
      DT: null,
    };
  }
};

// Qu√™n m·∫≠t kh·∫©u
exports.forgetPassword = async (email) => {
  try {
    const user = await User.findByEmail(email);
    if (!user) {
      return {
        EM: "Email kh√¥ng t·ªìn t·∫°i",
        EC: "2",
        DT: null,
      };
    }

    const otp = generateOtp();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 ph√∫t

    await EmailVerification.createVerification({
      user_id: user.user_id,
      email,
      verification_token: otp,
      expires_at: expiresAt,
    });
    await sendOtpEmail(email, otp);

    return {
      EM: "Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y OTP.",
      EC: "0",
      DT: { otp },
    };
  } catch (error) {
    console.error("L·ªói trong forgetPassword service:", error);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x·ª≠ l√Ω qu√™n m·∫≠t kh·∫©u",
      EC: "-2",
      DT: null,
    };
  }
};

// reset m·∫≠t kh·∫©u
exports.resetPassword = async (email, newPassword) => {
  try {
    const user = await User.findByEmail(email);
    if (!user) {
      return {
        EM: "Email kh√¥ng t·ªìn t·∫°i",
        EC: "2", // l·ªói nghi·ªáp v·ª•
        DT: null,
      };
    }

    const passwordHash = await bcrypt.hash(newPassword, 10);
    await User.updateUser(user.user_id, { password_hash: passwordHash });

    return {
      EM: "ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng.",
      EC: "0", // success
      DT: null,
    };
  } catch (error) {
    console.error("L·ªói trong changePassword service:", error);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒë·ªïi m·∫≠t kh·∫©u",
      EC: "-2", // l·ªói h·ªá th·ªëng
      DT: null,
    };
  }
};

// module ƒêƒÉng k√≠
// ƒêƒÉng k√Ω
exports.register = async (
  username,
  email,
  password,
  fullName,
  phoneNumber,
  avatarUrl
) => {
  try {
    // Check email
    const existingEmail = await User.findByEmail(email);
    if (existingEmail) {
      return {
        EM: "Email ƒë√£ t·ªìn t·∫°i",
        EC: "2", // l·ªói nghi·ªáp v·ª•
        DT: null,
      };
    }

    // Check username
    const existingUsername = await User.findByUsername(username);
    if (existingUsername) {
      return {
        EM: "Username ƒë√£ t·ªìn t·∫°i",
        EC: "2",
        DT: null,
      };
    }

    // Hash password
    const passwordHash = await bcrypt.hash(password, 10);

    // T·∫°o user m·ªõi
    const newUser = await User.createUser({
      username,
      email,
      password_hash: passwordHash,
      full_name: fullName || null,
      phone_number: phoneNumber || null,
      avatar_url: avatarUrl || null,
      status: "unverified",
    });

    // T·∫°o OTP x√°c th·ª±c email
    const otp = generateOtp();
    const expiresAt = new Date(Date.now() + 24 * 60 * 60 * 1000); // 1 ng√†y

    await EmailVerification.createVerification({
      user_id: newUser.user_id,
      email,
      verification_token: otp,
      expires_at: expiresAt,
    });

    // G·ª≠i OTP qua email
    await sendOtpEmail(email, otp);

    return {
      EM: "ƒêƒÉng k√Ω th√†nh c√¥ng, vui l√≤ng ki·ªÉm tra email ƒë·ªÉ x√°c th·ª±c OTP.",
      EC: "0", // success
      DT: null, // Kh√¥ng tr·∫£ OTP ra ngo√†i
    };
  } catch (error) {
    console.error("L·ªói trong register service:", error);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω",
      EC: "-2", // l·ªói h·ªá th·ªëng
      DT: null,
    };
  }
};

// X√°c th·ª±c OTP
exports.verifyOtp = async (email, otp, type) => {
  console.log("üöÄ ~ emailVerification:");

  try {
    console.log("run2");
    const emailVerification = await EmailVerification.findValidVerification(
      email,
      otp
    );

    if (!emailVerification) {
      return {
        EM: "M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n",
        EC: "2",
        DT: null,
      };
    }

    // N·∫øu OTP cho ƒëƒÉng k√Ω th√¨ k√≠ch ho·∫°t t√†i kho·∫£n
    if (type === "register") {
      const user = await User.findByEmail(email);
      if (user) {
        await User.updateUser(user.user_id, { status: "active" });
      }
    }

    // ƒê√°nh d·∫•u ƒë√£ x√°c th·ª±c
    await EmailVerification.markAsVerified(emailVerification.verification_id);

    return {
      EM: "X√°c th·ª±c th√†nh c√¥ng!",
      EC: "0",
      DT: null,
    };
  } catch (error) {
    console.error("L·ªói trong verifyOtp service:", error);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh x√°c th·ª±c OTP",
      EC: "-2",
      DT: null,
    };
  }
};

// Refesh token
exports.refreshToken = async (refreshToken) => {
  try {
    const decoded = jwt.verify(refreshToken, process.env.JWT_SECRET);
    const user = await User.findByEmail(decoded.email);
    const token = jwt.sign(
      { userId: user.user_id, email: user.email },
      process.env.JWT_SECRET,
      { expiresIn: "1h" }
    );

    return {
      EM: "L√†m m·ªõi token th√†nh c√¥ng",
      EC: "0",
      DT: { token },
    };
  } catch (error) {
    console.error("L·ªói trong refreshToken service:", error);
    return {
      EM: "C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh l√†m m·ªõi token",
      EC: "-2",
      DT: null,
    };
  }
};
